ocellaris:
    type: input
    version: 1.0

user_code:
    constants:
        R: 1
        r: 0.4
        H: 10
        h: 3
        M: 1
        VZ: 10
    code: |
        # Run gmsh if the mesh xml file is missing. Requires gmsh version > 3
        # with support for the OpenCASCADE geometry engine
        import os, subprocess
        mydir = os.path.dirname(os.path.abspath(__file__))
        geo = os.path.join(mydir, 'datafiles', 'falling_sphere.geo')
        msh = os.path.join(mydir, 'datafiles', 'falling_sphere.msh')
        xml = os.path.join(mydir, 'datafiles', 'falling_sphere.xml')
        assert os.path.isfile(geo)
        if not os.path.isfile(msh):
            print('Running gmsh on', geo)
            subprocess.call(['gmsh', '-3', '-optimize', geo, '-o', msh])
        if not os.path.isfile(xml):
            print('Running meshio-convert on', msh)
            subprocess.call(['meshio-convert', '--input-format', 'gmsh-ascii',
                             '--output-format', 'dolfin-xml', msh, xml])

metadata:
    author: Tormod Landet
    date: 2017-11-01
    description: |
        Flow around a free falling 3D sphere
        Made to test/develop 3D support in Ocellaris  

physical_properties:
    g: [0, 0, -9.81]
    nu: 1.5e-5
    rho: 1.0

mesh:
    type: XML
    mesh_file: datafiles/falling_sphere.xml

boundary_conditions:
-   name: Walls
    selector: code
    inside_code: 'on_boundary'
    u:
        type: CppCodedValue
        cpp_code: ['0', '0', 'VZ']
    p:
        type: WallPressure
-   name: Inlet
    selector: code
    inside_code: 'on_boundary and x[2] < 1e-5'
    u:
        type: CppCodedValue
        cpp_code: ['0', '0', 'VZ']
    p:
        type: WallPressure
-   name: Outlet
    selector: code
    inside_code: 'on_boundary and x[2] > H - 1e-5'
    u0:
        type: ConstantValue
        value: 0
    u1:
        type: ConstantValue
        value: 0
    u2:
        type: ConstantGradient
        value: 0
    p:
        type: ConstantValue
        value: 0
-   name: Sphere
    selector: code
    inside_code: 'on_boundary and (pow(x[0], 2) + pow(x[1], 2) + pow(x[2] - h, 2)) < 1.01*pow(r, 2)'
    u:
        type: ConstantValue
        value: [0, 0, 0]
    p:
        type: WallPressure

time:
    dt: 0.01
    tmax: 2

output:
    prefix: output/falling_sphere
    dolfin_log_level: warning
    ocellaris_log_level: info
    xdmf_write_interval: 10

solver:
    type: Coupled
    num_inner_iter: 20
    allowable_error_inner: 5.0e-3
    polynomial_degree_pressure: 1
    polynomial_degree_velocity: 2
    function_space_pressure: DG
    function_space_velocity: DG
    force_steady: yes
    steady_velocity_stopping_criterion: -1 #1e-4
    
    # PETSc solver selection
    coupled:
        solver: lu
        lu_method: mumps

hooks:
    pre_simulation:
    -   name: save mesh
        enabled: no
        code: |
            print('Writing Mesh ...')
            prefix = sim.input.get_value('output/prefix', '')
            fn = prefix + '_mesh.xdmf'
            with XDMFFile(mesh.mpi_comm(), fn) as f:
                f.write(boundary_marker)
            print('    Wrote', fn)

#console_at_end: true
#console_on_error: true
