ocellaris:
    type: input
    version: 1.0

physical_properties:
    rho0: 1
    nu0: 1.0e-2
    rho1: 1.02
    nu1: 1.0e-2
    g: [0, -9.81]

mesh:
    type: Rectangle
    #Nx: 256
    #Ny: 128
    #Nx: 80
    #Ny: 20
    Nx: 160
    Ny: 40
    starty: 0.5
    endx: 4

boundary_conditions:
-   name: bottom and top
    selector: code
    inside_code: 'on_boundary and (x[1] < 0.5+1e-5 or x[1] > 1 - 1e-5)'
    p:
        type: WallPressure
    u0:
        type: ConstantGradient
        #type: ConstantValue
        value: 0
    u1:
        type: ConstantValue
        value: 0
-   name: walls
    selector: code
    inside_code: 'on_boundary and (x[0] < 1e-5 or x[0] > 4 - 1e-5)'
    p:
        type: WallPressure
    u0:
        type: ConstantValue
        value: 0
    u1:
        type: ConstantGradient
        #type: ConstantValue
        value: 0

initial_conditions:
    cp:
        cpp_code: '((x[0] < 0.25 - 1e-5 && x[1] > 0.67 - 1e-5) || x[1] > 0.75 - 1e-5) ? 1.0 : 0.0'

time:
    dt: 0.1
    tmax: 20.0

output:
    prefix: output/internal_soliton
    log_name: .log
    dolfin_log_level: warning
    ocellaris_log_level: info

multiphase_solver:
    type: BlendedAlgebraicVOF
    function_space_colour: DG
    polynomial_degree_colour: 0

solver:
    type: Coupled
    function_space_velocity: DG
    function_space_pressure: DG
    polynomial_degree_velocity: 2
    polynomial_degree_pressure: 1
    use_stress_divergence_form: false

convection:
    u:
        convection_scheme: Upwind
    c:
        convection_scheme: HRIC

probes:
    -   name: c=0.5
        type: IsoSurface
        value: 0.5
        field: c
        file_name: '_c05.out'
        show_interval: 1
        xlim: [0, 4]
        ylim: [0.6, 0.9]
    -   name: c=0.1
        type: IsoSurface
        value: 0.1
        field: c
        file_name: '_c01.out'
    -   name: c=0.9
        type: IsoSurface
        value: 0.9
        field: c
        file_name: '_c09.out'

hooks:
    post_timestep:
    -   name: print location of largest divergence
        enabled: yes
        code: |
            udiv = project(div(u), Vc)
            values = udiv.compute_vertex_values()
            coords = mesh.coordinates()
            valmax = -1
            for val, coord in zip(values, coords):
                if abs(val) > valmax:
                    valmax = abs(val)
                    coordmax = coord
            print '\n%10.3e   %5.2f %5.2f\n' % (valmax, coordmax[0], coordmax[1])
            #if valmax > 1e-4:
            #    run_debug_console(simulation, False)
            #    exit()
    
    -   name: plot u
        enabled: no
        code: |
            plot(u, title='u', key='u', window_width=1000, interactive=True)
    
    -   name: save colour fields
        enabled: yes
        code: |
            if not 'cf' in hook_data:
                prefix = simulation.input.get_value('output/prefix')
                hook_data['cf'] = File(prefix + '_c.pvd')
                c.rename('c', 'c')
                c_star.rename('c_star', 'c_star')
            hook_data['cf'] << (c, t)
            hook_data['cf'] << (c_star, t)

_reporting:
    reports_to_show: ['sum(c)', 'max(div(u_adv_c))'] #, 'max(div(u)|Vp)']

#console_on_error: true
#console_at_end: true
