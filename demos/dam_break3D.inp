ocellaris:
    type: input
    version: 1.0
    
user_code:
    constants:
        A: 0.05715  # 0.0254 * 2.25
        N: 5

physical_properties:
    rho0: 1000.0
    nu0: 1.0e-6
    rho1: 1.0
    nu1: 1.5e-5
    g: [0, 0, -9.81]

mesh:
    type: Box
    Nx: py$ 5*N
    Ny: py$ 3*N
    Nz: 1
    endx: py$ A * 5
    endy: py$ A * 3
    endz: py$ A / N 

# BCs with wall slip
boundary_conditions:
-   name: all walls
    selector: code
    inside_code: 'on_boundary'
    p:
        type: WallPressure
    u:
        type: FreeSlip

initial_conditions:
    cp:
        cpp_code: '(x[0] < A + 1e-5 && x[1] < 2 * A + 1e-5) ? 1.0 : 0.0'
    cpp:
        cpp_code: '(x[0] < A + 1e-5 && x[1] < 2 * A + 1e-5) ? 1.0 : 0.0'

time:
    dt: py$ 0.003/N
    tmax: 0.3

output:
    prefix: output/dam_break3D
    log_name: .log
    dolfin_log_level: warning
    ocellaris_log_level: info
    xdmf_write_interval: 10
    plot_divergences: yes
    divergence_method: div0

multiphase_solver:
    type: BlendedAlgebraicVOF
    function_space_colour: DG
    polynomial_degree_colour: 0
    continuous_fields: no
    plot_fields: yes

solver:
    type: Coupled
    num_inner_iter: 10
    allowable_error_inner: 1e-8
    function_space_velocity: DG
    function_space_pressure: DG
    polynomial_degree_velocity: 2
    polynomial_degree_pressure: 1

convection:
    c:
        convection_scheme: HRIC

slope_limiter:
    c:
        enforce_bounds: yes
    u:
        #method: Solenoidal
        #out_of_bounds_penalty_fac: 1000.0
        #out_of_bounds_penalty_const: 0.1
        
        method: Componentwise
        comp_method: HierarchicalTaylor
        limit_conv: no
        
        plot: yes
        use_cpp: yes
        skip_boundary: no
        #limit_no_cells: yes
        #max_cost: 0.1
        #surface_probe: free_surface

probes:
    -   name: free_surface
        enabled: no
        type: IsoSurface
        value: 0.5
        field: c
        file_name: '_free_surface.out'
        custom_hook: MultiPhaseModelUpdated

hooks:
    post_timestep:
    -   name: debug on fishy values
        enabled: no
        code: |
            umag = (u0.vector().get_local()**2 +  u1.vector().get_local()**2)
            if max(umag) > 1:
                run_debug_console(simulation, False)

    -   name: print location of largest divergence
        enabled: no
        code: |
            udiv = project(div(u), Vc)
            values = udiv.compute_vertex_values()
            coords = mesh.coordinates()
            valmax = 0
            for val, coord in zip(values, coords):
                if abs(val) > valmax:
                    valmax = abs(val)
                    coordmax = coord
            print('\n%10.3e   %5.2f %5.2f\n' % (valmax, coordmax[0], coordmax[1]))
            if valmax > 1e-3:
                print 'Valmax is above 1e-3', valmax
                #run_debug_console(simulation, False)
