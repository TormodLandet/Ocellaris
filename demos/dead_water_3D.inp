ocellaris:
    type: input
    version: 1.0

metadata:
    author: Tormod Landet
    date: 2017-12-13
    description: |
        Flow around a parabolic hull in a stratified fluid  

user_code:
    constants:
        # Geometry. DO NOT CHANGE WITHOUT UPDATING gmesh geo FILE!!
        L: 200       # domain length
        H: 35        # domain depth
        B: 50        # domain breadth
        h: 7.0       # depth to pycnocline
        d: 5         # draught amidships
        l: 30        # length of hull water line
        C: 65        # distance from midships to inlet
        
        # Non-geometry parameters (these are controlled by a post_timestep hook below)
        Velocity: 0.0    # vessel speed (divide by 0.514444 to get knots)
        Tmax:  1.0e+6    # maximum duration
        FRESH: 1000.0    # Upper layer density
        SALT: 1028.0     # Lower layer density
    code: |
        # Run gmsh if the mesh xml file is missing. Requires gmsh version > 3
        # with support for the OpenCASCADE geometry engine
        import os, subprocess, dolfin
        if dolfin.MPI.comm_world.rank == 0 and not simulation.restarted:
            mydir = os.path.dirname(os.path.abspath(__file__))
            geo = os.path.join(mydir, 'datafiles', 'dead_water_3D.geo')
            msh = os.path.join(mydir, 'datafiles', 'dead_water_3D.msh')
            assert os.path.isfile(geo)
            if not os.path.isfile(msh):
                print('Running gmsh on', geo)
                subprocess.call(['gmsh', '-2', '-optimize', geo, '-o', msh])
        dolfin.MPI.comm_world.barrier()

physical_properties:
    nu: 1.0e-6
    rho_min: py$ FRESH
    rho_max: py$ SALT
    g: [0, 0, -9.81]

mesh:
    type: meshio
    mesh_file: datafiles/dead_water_3D.msh
    meshio_type: gmsh
    sort_order: [2, 1, 0]

fields:
-   name: velocity
    type: VectorField
    variable_name: u
    cpp_code: ['Velocity', '0', '0']

-   name: density
    type: SharpField
    variable_name: rho
    value_above: py$ FRESH
    value_below: py$ SALT
    z: py$ -h

-   name: outlet zone
    type: ScalarField
    variable_name: beta
    stationary: yes
    cpp_code: |
        [&]() {
            double approx_wave_length = l;
            double dz0 = L - 2 * approx_wave_length;
            double dz1 = L;
            if (x[0] < dz0) {
                return 0.0;
            } else if (x[0] > dz1) {
                return 1.0;
            } else {
                return pow((x[0] - dz0)/(dz1 - dz0), 2);
            }
        }()

-   name: inlet zone
    type: ScalarField
    variable_name: beta
    stationary: yes
    cpp_code: |
        [&]() {
            double dz0 = 0;
            double dz1 = (C - l/2)/3;
            if (x[0] < dz0) {
                return 1.0;
            } else if (x[0] > dz1) {
                return 0.0;
            } else {
                return pow((x[0] - dz1)/(dz0 - dz1), 2);
            }
        }()

forcing_zones:
-   name: outlet velocity damping
    type: MomentumForcing
    zone: outlet zone/beta
    target: velocity/u
    penalty: 5

-   name: outlet density damping
    type: ScalarForcing
    zone: outlet zone/beta
    target: density/rho
    variable: rho
    penalty: 1

-   name: inlet velocity damping
    type: MomentumForcing
    zone: inlet zone/beta
    target: velocity/u
    penalty: 5

-   name: inlet density damping
    type: ScalarForcing
    zone: inlet zone/beta
    target: density/rho
    variable: rho
    penalty: 1

initial_conditions:
    rho_p:
        function: density/rho

boundary_conditions:

-   name: Hull
    selector: code
    inside_code: 'on_boundary'
    u:
        type: FreeSlip

-   name: Inlet
    selector: code
    inside_code: 'on_boundary and x[0] < 1e-5'
    u:
        type: FieldFunction
        function: velocity/u
    rho:
        type: FieldFunction
        function: density/rho

-   name: Outlet
    selector: code
    inside_code: 'on_boundary and x[0] > C + l'
    u:
        type: FieldFunction
        function: velocity/u
    rho:
        type: FieldFunction
        function: density/rho

-   name: Bottom
    selector: code
    inside_code: 'on_boundary and x[2] < -H + 1e-5'
    u:
        type: FreeSlip

-   name: Surface z=0
    selector: code
    inside_code: 'on_boundary and x[2] > -1e-5'
    u:
        type: FreeSlip

-   name: Sides
    selector: code
    inside_code: 'on_boundary and (x[1] > B/2 - 1e-5 or x[1] < 1e-5)'
    u:
        type: FreeSlip

#-   name: Valve
#    selector: code
#    inside_code: 'on_boundary and x[2] > -1e-5 and x[0] > L - 2.5 * l'
#    u:
#        type: OpenOutletBoundary
#    rho:
#        type: ConstantValue
#        value: py$ FRESH

time:
    dt: 0.5
    tmax: py$ Tmax

output:
    prefix: output/dead_water_3D
    dolfin_log_level: warning
    ocellaris_log_level: info
    stdout_enabled: yes # needed for stdout monitoring in orun
    flush_interval: 60 # interval in seconds for log file and stdout flushing (default 5 sec)
    #xdmf_write_interval: 200
    vtk_write_interval: 0 # overridden in hook-script (see below)
    hdf5_write_interval: 50
    hdf5_only_store_latest: yes
    show_memory_usage: no

solver:
    type: IPCS-A
    num_inner_iter: py$ 30 if it < 3 else (10 if it < 10 else 3)
    allowable_error_inner: 1.0e-4

multiphase_solver:
    type: VariableDensity
    function_space_rho: DG
    polynomial_degree_rho: 2

slope_limiter:
    rho:
        method: HierarchicalTaylor
        skip_boundaries: []
        enforce_bounds: yes
        enforce_bcs: no
    u:
        method: Componentwise
        comp_method: HierarchicalTaylor

probes:
    -   name: cutY1.0_rho
        enabled: yes
        type: PlaneProbe
        plane_point: [0, 1, 0]
        plane_normal: [0, 1, 0]
        field: [rho, u0, u2]
        write_interval: 10
        custom_hook: MultiPhaseModelUpdated
        
    -   name: cutZh_p
        enabled: yes
        type: PlaneProbe
        plane_point: py$ [0, 0, -h]
        plane_normal: [0, 0, 1]
        field: p
        write_interval: 10

hooks:
    post_timestep:

    -   name: Forces on the hull
        enabled: yes
        code: |
            if not 'forceforms' in hook_data:
                hull_id = boundary_by_name['Hull'].mark_id
                hull_ds = ds(hull_id)
                n = FacetNormal(mesh)
                Fpx = Form(p * dot(n, as_vector([1, 0, 0])) * hull_ds)
                Fpy = Form(p * dot(n, as_vector([0, 1, 0])) * hull_ds)
                Fpz = Form(p * dot(n, as_vector([0, 0, 1])) * hull_ds)
                hook_data['forceforms'] = (Fpx, Fpy, Fpz)
            Fpx, Fpy, Fpz = hook_data['forceforms']
            simulation.reporting.report_timestep_value('Fpx', assemble(Fpx))
            simulation.reporting.report_timestep_value('Fpy', assemble(Fpy))
            simulation.reporting.report_timestep_value('Fpz', assemble(Fpz))
            
            N = 300
            all_Fpx = simulation.reporting.timestep_xy_reports['Fpx']
            simulation.reporting.report_timestep_value('Fpx_avg', numpy.mean(all_Fpx[-N:]))
            simulation.reporting.report_timestep_value('Fpx_std', numpy.std(all_Fpx[-N:]))
    
    -   name: Update velocity
        enabled: yes
        code: |
            U_vals = [0.00, 0.30, 0.40, 0.50, 0.60, 0.70]
            U_vals = [0.00, 0.60, 0.70, 0.80, 1.00, 1.10]
            TIMESTEP_BASE = 0.20
            prefix = simulation.input.get_value('output/prefix', '')
            Nramp = 100
            Ntot_min = 2000
            duration_min = 800
            
            if not hook_data:
                simulation.log.warning('Creating initial update velocity hook data')
                hook_data['iU'] = 0
                hook_data['t_start'] = -1
                hook_data['t_ramp'] = -1
                hook_data['t_end'] = -1
                simulation.io.lvtk.write()
            
            i = hook_data['iU']
            U = U_vals[i]
            
            t1, t2, t3 = hook_data['t_start'], hook_data['t_ramp'], hook_data['t_end']
            if t > t3:
                if simulation.timestep_restart > 5:
                    fn = prefix + '_savepoint_U_%.3f.h5' % U
                    simulation.io.write_restart_file(fn)
                    simulation.log.info('Saving restart file at end of velocity %.2f' % U)
                
                if i == len(U_vals) - 1:
                    simulation.log.info('End of velocity vector, stopping')
                    simulation.input.set_value('time/tmax', t)
                else:
                    # Go to next velocity
                    hook_data['iU'] += 1
                    dt = TIMESTEP_BASE / U_vals[hook_data['iU']]
                    simulation.input.set_value('time/dt', dt)
                    simulation.data['time_coeffs'].assign(dolfin.Constant([1, -1, 0]))
                    simulation.log.info('Changing timestep to %r' % dt)
                    hook_data['Uprev'] = U
                    hook_data['t_start'] = t
                    hook_data['t_ramp'] = t + dt * Nramp
                    hook_data['t_end'] = t + max(dt * Ntot_min, duration_min)
            elif t < t2:
                f = (t - t1) / (t2 - t1)
                F = (3 * f**2 - 2 * f**3)
                U = (1 - F) * hook_data['Uprev'] +  F * U
            
            # Write some plot files towards the end of the velocity
            lvtk_write_interval = 0
            if t > t3 - 500 * simulation.input.get_value('time/dt', 0, 'float'):
                lvtk_write_interval = 100
            simulation.input.set_value('output/vtk_write_interval', lvtk_write_interval)
            
            Vel = simulation.input.get_value('user_code/constants/Velocity')
            simulation.reporting.report_timestep_value('Vel', Vel)
            simulation.input.set_value('user_code/constants/Velocity', U)

