ocellaris:
    type: input
    version: 1.0
    
metadata:
    author: Tormod Landet
    date: 2015-03-13
    description: |
        Implements the Taylor-Green vortex test case. This benchmark case
        with purely periodic boundary conditions has an analytical solution
        in both space and time with the incompressible Navier-Stokes equations

physical_properties:
    g: [0, 0]
    nu0: 0.01
    rho0: 1.0

mesh:
    type: Rectangle
    Nx: 64
    Ny: 64
    endx: 2
    endy: 2
    

# Periodic boundary conditions. Not supported in FEniCS 1.5 for DG. Works for CG
#
# Example of periodic boundary conditions. The inside and map code is
# taken from the Taylor-Green demo in Oasis, https://github.com/mikaem/Oasis/
#boundary_conditions:
#-   name: left and bottom    
#    selector: code
#    inside_code: |
#        inside = bool((near(x[0], 0) or near(x[1], 0)) and 
#                      (not ((near(x[0], 0) and near(x[1], 2)) or 
#                      (near(x[0], 2) and near(x[1], 0)))) and on_boundary)
#    map_code: |
#        if near(x[0], 2) and near(x[1], 2):
#            y[0] = x[0] - 2.0
#            y[1] = x[1] - 2.0
#        elif near(x[0], 2):
#            y[0] = x[0] - 2.0
#            y[1] = x[1]
#        else:
#            y[0] = x[0]
#            y[1] = x[1] - 2.0

boundary_conditions:
-   name: walls
    selector: code
    inside_code: on_boundary
    u:
        type: CppCodedValue
        cpp_code:
        -   -sin(pi*x[1]) * cos(pi*x[0]) * exp(-2*pi*pi*nu*t)
        -    sin(pi*x[0]) * cos(pi*x[1]) * exp(-2*pi*pi*nu*t)
    p:
        type: CppCodedValue
        cpp_code: -(cos(2*pi*x[0]) + cos(2*pi*x[1])) * exp(-4.*pi*pi*nu*t)/4

initial_conditions:
    up0:
        cpp_code: -sin(pi*x[1])*cos(pi*x[0])*exp(-2*pi*pi*nu*t)
    up1:
        cpp_code:  sin(pi*x[0])*cos(pi*x[1])*exp(-2*pi*pi*nu*t)
    p:
        cpp_code: -(cos(2*pi*x[0]) + cos(2*pi*x[1])) * exp(-4*pi*pi*nu*t)/4

time:
    dt: 0.001
    tmax: 1.0

output:
    prefix: taylor_green
    log_name: .log
    dolfin_log_level: warning
    ocellaris_log_level: info

solver:
    type: IPCS
    num_inner_iter: 10
    allowable_error_inner: 5.0e-3
    polynomial_degree_pressure: 1
    polynomial_degree_velocity: 2
    function_space_pressure: CG
    function_space_velocity: CG
    timestepping_method: BDF

convection:
    u:
        convection_scheme: Upwind

hooks:
    post_timestep:
    -   name: calculate Taylor-Green error
        code: |
            errors_u0 = hook_data.setdefault('errors_u0', [])
            if it == 1 or it % 1 == 0:
                e = Expression('-sin(pi*x[1])*cos(pi*x[0])*exp(-2*pi*pi*nu*t)', t=t, nu=nu)
                ue = interpolate(e, Vu)
                err = norm(u0.vector() - ue.vector())/norm(ue)
                errors_u0.append(err)
                #print errors_u0
                print 'ERROR-SUM-u0', sum(errors_u0)

#console_at_end: false
#console_on_error: true
