ocellaris:
    type: input
    version: 1.0
    
metadata:
    author: Tormod Landet
    date: 2015-03-13
    description: |
        Implements the Taylor-Green vortex test case. This benchmark case
        with purely periodic boundary conditions has an analytical solution
        in both space and time with the incompressible Navier-Stokes equations

physical_properties:
    g: [0, 0]
    nu0: 0.01
    rho0: 1.0

mesh:
    type: Rectangle
    Nx: 60
    Ny: 60
    endx: 2
    endy: 2
    diagonal: right

# Periodic boundary conditions. Not supported in FEniCS for DG. Works for CG
#
# Example of periodic boundary conditions. The inside and map code is
# taken from the Taylor-Green demo in Oasis, https://github.com/mikaem/Oasis/
#boundary_conditions:
#-   name: left and bottom    
#    selector: code
#    inside_code: |
#        inside = bool((near(x[0], 0) or near(x[1], 0)) and 
#                      (not ((near(x[0], 0) and near(x[1], 2)) or 
#                      (near(x[0], 2) and near(x[1], 0)))) and on_boundary)
#    map_code: |
#        if near(x[0], 2) and near(x[1], 2):
#            y[0] = x[0] - 2.0
#            y[1] = x[1] - 2.0
#        elif near(x[0], 2):
#            y[0] = x[0] - 2.0
#            y[1] = x[1]
#        else:
#            y[0] = x[0]
#            y[1] = x[1] - 2.0

# Dirichlet boundary conditions for u, Neumann for p
boundary_conditions:
-   name: walls
    selector: code
    inside_code: on_boundary
    u:
        type: CppCodedValue
        cpp_code:
        -   -sin(pi*x[1]) * cos(pi*x[0]) * exp(-2*pi*pi*nu*t)
        -    sin(pi*x[0]) * cos(pi*x[1]) * exp(-2*pi*pi*nu*t)
    p:
        type: ConstantGradient
        value: 0

initial_conditions:
    up0:
        cpp_code: -sin(pi*x[1])*cos(pi*x[0])*exp(-2*pi*pi*nu*t)
    up1:
        cpp_code:  sin(pi*x[0])*cos(pi*x[1])*exp(-2*pi*pi*nu*t)
    upp0:
        cpp_code: -sin(pi*x[1])*cos(pi*x[0])*exp(-2*pi*pi*nu*(t-dt))
    upp1:
        cpp_code:  sin(pi*x[0])*cos(pi*x[1])*exp(-2*pi*pi*nu*(t-dt))
    p:
        cpp_code: -(cos(2*pi*x[0]) + cos(2*pi*x[1])) * exp(-4*pi*pi*nu*t)/4

time:
    dt: 0.1
    tmax: 0.2

output:
    prefix: output/taylor_green
    log_name: .log
    dolfin_log_level: warning
    ocellaris_log_level: info

solver:
    type: IPCS
    equation_subtype: LDGforPressure
    polynomial_degree_velocity: 2
    polynomial_degree_pressure: 1
    function_space_velocity: DG
    function_space_pressure: DG
    timestepping_method: BDF
    num_inner_iter: 30
    allowable_error_inner: 1.0e-8
    use_stress_divergence_form: false
    p:
        solver: lu
        preconditioner: petsc

slope_limiter:
    u:
        method: None  # HierarchicalTaylor

hooks:
#    pre-solve:
#    -   name: set params
#        code: |
#            parameters["linear_algebra_backend"] = "PETSc"
#            parameters["form_compiler"]["optimize"] = True
#            parameters["form_compiler"]["cpp_optimize"] = True
#            parameters["form_compiler"]["representation"] = "quadrature"
#            #parameters["form_compiler"]["quadrature_degree"] = 4
#            #parameters["form_compiler"]["cache_dir"] = "instant"
#            parameters["form_compiler"]["cpp_optimize_flags"] = "-O3 --fast-math"
#            parameters["mesh_partitioner"] = "ParMETIS"
#            parameters["form_compiler"].add("no_ferari", True)
#            #parameters["ghost_mode"] = "shared_vertex"
#            #set_log_active(False)
                        
    post_timestep:
    -   name: calculate divergence
        code: |
            div_u = project(u[0].dx(0) + u[1].dx(1), Vp)
            print 'max_div_u|Vp = %10.3e' % abs(div_u.vector().array()).max()

#console_at_end: false
#console_on_error: true
