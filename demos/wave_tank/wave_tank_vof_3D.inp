ocellaris:
    type: input
    version: 1.0

metadata:
    author: Tormod Landet
    date: 2017-11-01
    description: |
        3D wave tank with damping zone. VOF version

user_code:
    constants:
        L: 40
        H: 10
        W: 1
        h: 7
        h_above: 3 
        N: 2     # cells per meter
        iz0: 0   # Inlet zone x pos 
        iz1: 10
        dz0: 30  # Outlet zone x pos
        dz1: 40

physical_properties:
    rho0: 1000.0
    nu0:     1.0e-6
    rho1:    1.0
    nu1:     1.5e-5
    g: [0, 0, -9.81]
    
mesh:
    type: Box
    Nx: py$ int(N * L + 0.5)
    Ny: py$ max(int(N * W  + 0.5), 1)
    Nz: py$ int(N * H)
    endx: py$ L
    endz: py$ H
    endy: py$ W
    #move: ['0', '0', '0.0297619048*pow(x[2], 3) - 0.520833333*pow(x[2], 2) + 2.23214286*x[2] + 3.55271368e-15']

fields:
-   name: waves
    type: RaschiiWaves
    wave_model: Fenton
    air_model: FentonAir
    model_order: 5
    still_water_position: py$ h
    depth: py$ h
    depth_above: py$ h_above
    blending_height: 2.0
    wave_height: 0.5
    wave_length: 20.0

-   name: outlet zone
    type: ScalarField
    variable_name: beta
    stationary: yes
    cpp_code: 'x[0] < dz0 ? 0.0 : (x[0] > dz1 ? 1.0 : pow((x[0] - dz0)/(dz1 - dz0), 2))'
    
-   name: inlet zone
    type: ScalarField
    variable_name: beta
    stationary: yes
    cpp_code: 'x[0] < iz0 ? 1.0 : (x[0] > iz1 ? 0.0 : pow((x[0] - iz1)/(iz0 - iz1), 2))'

forcing_zones:
-   name: wave damping
    type: MomentumForcing
    zone: outlet zone/beta
    target: waves/u
    penalty: 10
    plot: no

-   name: density damping
    type: ScalarForcing
    variable: c
    zone: outlet zone/beta
    target: waves/c
    penalty: 10
    plot: no

-   name: wave creation
    type: MomentumForcing
    zone: inlet zone/beta
    target: waves/u
    penalty: 10
    plot: no

-   name: density at inlet
    type: ScalarForcing
    variable: c
    zone: inlet zone/beta
    target: waves/c
    penalty: 10
    plot: no

initial_conditions:
    cp:
        function: waves/c
    up0:
        function: waves/uhoriz
    up2:
        function: waves/uvert

boundary_conditions:
-   name: Inlet
    selector: code
    inside_code: 'on_boundary and x[0] < 1e-5'
    u0:
        type: FieldFunction
        function: waves/uhoriz
    u1:
        type: ConstantValue
        value: 0
    u2:
        type: FieldFunction
        function: waves/uvert
    c:
        type: FieldFunction
        function: waves/c

-   name: Outlet
    selector: code
    inside_code: 'on_boundary and x[0] > L - 1e-5'
    u0:
        type: FieldFunction
        function: waves/uhoriz
    u1:
        type: ConstantValue
        value: 0
    u2:
        type: FieldFunction
        function: waves/uvert
    c:
        type: FieldFunction
        function: waves/c

-   name: Bottom
    selector: code
    inside_code: 'on_boundary and x[2] < 1e-5'
    u0:
        type: ConstantGradient
        value: 0
    u1:
        type: ConstantGradient
        value: 0
    u2:
        type: ConstantValue
        value: 0
    c:
        type: ConstantValue
        value: 1

-   name: Top
    selector: code
    inside_code: 'on_boundary and x[2] > H - 1e-5'
    u0:
        type: ConstantGradient
        value: 0
    u1:
        type: ConstantGradient
        value: 0
    u2:
        type: ConstantValue
        value: 0
    c:
        type: ConstantValue
        value: 0

-   name: Sides
    selector: code
    inside_code: 'on_boundary and (x[1] < 1e-5 or x[1] > W - 1e-5)'
    u0:
        type: ConstantGradient
        value: 0
    u1:
        type: ConstantValue
        value: 0
    u2:
        type: ConstantGradient
        value: 0
#-   name: valve
#    selector: code
#    inside_code: 'on_boundary and x[2] > H - 1e-5 and x[0] >= 80 and x[0] <= 100'
#    u0:
#        type: ConstantGradient
#        value: 0
#    u1:
#        type: ConstantGradient
#        value: 0
#    u2:
#        type: FieldVelocityValve
#        function: waves/u
#        regions: [inlet, outlet]

time:
    dt: 0.02
    tmax: 0.3 #30.0

output:
    prefix: 'output/wave_tank_vof_3D'
    dolfin_log_level: warning
    ocellaris_log_level: info
    flush_interval: 60
    xdmf_write_interval: 10
    hdf5_write_interval: 50
    hdf5_only_store_latest: yes
    divergence_method: div0
    plot_divergences: yes

solver:
    type: IPCS-A
    num_inner_iter: py$ 10 if it < 3 else (5 if it < 10 else 2)
    allowable_error_inner: 1e-4
    use_stress_divergence_form: yes
    #hydrostatic_pressure_calculation_every_timestep: no
    #project_initial_velocity: yes
    #splitting_approximation: min rho mass
    #num_elements_in_A_tilde_block: 1 # for SIMPLE solver only
    u:
        inner_iter_control: [5, 3]
        inner_iter_rtol: [1.0e-8, 1.0e-8, 1.0e-8]
        inner_iter_atol: [1.0e-12, 1.0e-12, 1.0e-12]
        inner_iter_max_it: [1000, 1000, 1000]
    p:
        inner_iter_control: [5, 3]
        inner_iter_rtol: [1.0e-8, 1.0e-8, 1.0e-8]
        inner_iter_atol: [1.0e-12, 1.0e-12, 1.0e-12]
        inner_iter_max_it: [1000, 1000, 1000]

multiphase_solver:
    type: BlendedAlgebraicVOF
    function_space_colour: DG
    polynomial_degree_colour: 0
    plot_fields: no

convection:
    c:
        convection_scheme: HRIC

slope_limiter:
    c:
        enforce_bounds: yes
    u:
        method: Componentwise
        comp_method: HierarchicalTaylor
        use_weak_bcs: no
    #u0:
    #    skip_boundaries: [Inlet, Outlet]
    #u1:
    #    skip_boundaries: []
    #u2:
    #    skip_boundaries: [Inlet, Outlet]

probes:
    -   name: cutY_c
        enabled: yes
        type: PlaneProbe
        plane_point: [0, 0, 0]
        plane_normal: [0, 1, 0]
        field: c
        write_interval: 1
