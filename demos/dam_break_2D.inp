ocellaris:
    type: input
    version: 1.0
    
user_code:
    constants:
        NU: 1.0e-4
        RHO: 1000.0
        A: 0.05715  # 0.0254 * 2.25
        N: 5

physical_properties:
    rho0: py$ RHO
    nu0: py$ NU
    rho1: 1.0
    nu1: py$ NU
    g: [0, -9.81]

_physical_properties:
    nu: py$ NU
    rho_min: 1.0
    rho_max: py$ RHO
    g: [0, -9.81]

mesh:
    type: Rectangle
    Nx: py$ N * 5
    Ny: py$ N * 3
    endx: py$ A * 5
    endy: py$ A * 3

# BCs with no-slip
_boundary_conditions:
-   name: walls
    selector: code
    inside_code: on_boundary
    u:
        type: ConstantValue
        value: [0, 0]
    p:
        type: WallPressure

# BCs with wall slip
boundary_conditions:
-   name: top and bottom
    selector: code
    inside_code: 'on_boundary and (x[1] < 1e-5 or x[1] > 3 * A - 1e-5)'
    p:
        type: WallPressure
    u0:
        type: ConstantGradient
        value: 0
    u1:
        type: ConstantValue
        value: 0
-   name: walls
    selector: code
    inside_code: 'on_boundary and (x[0] < 1e-5 or x[0] > 5 * A - 1e-5)'
    p:
        type: WallPressure
    u0:
        type: ConstantValue
        value: 0
    u1:
        type: ConstantGradient
        value: 0

initial_conditions:
    cp:
        cpp_code: '(x[0] < A + 1e-5 && x[1] < 2 * A + 1e-5) ? 1.0 : 0.0'
    cpp:
        cpp_code: '(x[0] < A + 1e-5 && x[1] < 2 * A + 1e-5) ? 1.0 : 0.0'

time:
    dt: py$ 0.003/N
    tmax: 0.3

output:
    prefix: output/dam_break_2D
    log_name: .log
    dolfin_log_level: warning
    ocellaris_log_level: info
    xdmf_write_interval: 10
    plot_divergences: yes
    divergence_method: div0

multiphase_solver:
    type: BlendedAlgebraicVOF
    function_space_colour: DG
    polynomial_degree_colour: 0
    continuous_fields: no
    plot_fields: yes

_multiphase_solver:
    type: VariableDensity
    function_space_rho: DG
    polynomial_degree_rho: 1

solver:
    type: Coupled
    num_inner_iter: 10
    allowable_error_inner: 1e-8
    function_space_velocity: DG
    function_space_pressure: DG
    polynomial_degree_velocity: 2
    polynomial_degree_pressure: 1

convection:
    c:
        convection_scheme: HRIC

slope_limiter:
    rho:
        method: HierarchicalTaylor
        plot: yes
        skip_boundary: no
        enforce_bounds: yes
    c:
        enforce_bounds: yes
    u:
        #method: Solenoidal
        #out_of_bounds_penalty_fac: 1000.0
        #out_of_bounds_penalty_const: 0.1
        
        method: Componentwise
        comp_method: HierarchicalTaylor
        limit_conv: no
        
        plot: yes
        use_cpp: yes
        skip_boundary: no
        #limit_no_cells: yes
        #max_cost: 0.1
        #surface_probe: free_surface

probes:
    -   name: free_surface
        enabled: no
        type: IsoSurface
        value: py$ (RHO - 1.0) / 2
        field: rho
        file_name: '_free_surface.out'
        custom_hook: MultiPhaseModelUpdated
        
    -   name: free_surface
        enabled: yes
        type: IsoSurface
        value: 0.5
        field: c
        file_name: '_free_surface.out'
        custom_hook: MultiPhaseModelUpdated
