ocellaris:
    type: input
    version: 1.0
    
user_code:
    constants:
        NU: 1.0e-4
        RHO: 1000.0
        A: 0.05715  # 0.0254 * 2.25

physical_properties:
    rho0: py$ RHO
    nu0: py$ NU
    rho1: 1.0
    nu1: py$ NU
    g: [0, -9.81]

_physical_properties:
    nu: py$ NU
    rho_min: 1.0
    rho_max: py$ RHO
    g: [0, -9.81]

mesh:
    type: Rectangle
    Nx: 25
    Ny: 15
    endx: py$ A * 5
    endy: py$ A * 3

# BCs with no-slip
_boundary_conditions:
-   name: walls
    selector: code
    inside_code: on_boundary
    u:
        type: ConstantValue
        value: [0, 0]
    p:
        type: WallPressure

# BCs with wall slip
boundary_conditions:
-   name: top and bottom
    selector: code
    inside_code: 'on_boundary and (x[1] < 1e-5 or x[1] > 3 * A - 1e-5)'
    p:
        type: WallPressure
    u0:
        type: ConstantGradient
        value: 0
    u1:
        type: ConstantValue
        value: 0
-   name: walls
    selector: code
    inside_code: 'on_boundary and (x[0] < 1e-5 or x[0] > 5 * A - 1e-5)'
    p:
        type: WallPressure
    u0:
        type: ConstantValue
        value: 0
    u1:
        type: ConstantGradient
        value: 0

initial_conditions:
    cp:
        cpp_code: '(x[0] < A + 1e-5 && x[1] < 2 * A + 1e-5) ? 1.0 : 0.0'
    cpp:
        cpp_code: '(x[0] < A + 1e-5 && x[1] < 2 * A + 1e-5) ? 1.0 : 0.0'

time:
    dt: 0.0005
    tmax: 0.05

output:
    prefix: py$ 'output/dam_break_64_nu%.0e_rho%d_test' % (NU, RHO)
    log_name: .log
    dolfin_log_level: warning
    ocellaris_log_level: info
    xdmf_write_interval: 10
    plot_divergences: yes
    divergence_method: div0

multiphase_solver:
    type: BlendedAlgebraicVOF
    function_space_colour: DG
    polynomial_degree_colour: 0
    continuous_fields: no
    plot_fields: yes
    #sky_location: 0.75

_multiphase_solver:
    type: VariableDensity
    function_space_rho: DG
    polynomial_degree_rho: 1
    #sky_location: 0.75

solver:
    type: Coupled
    num_inner_iter: 10
    allowable_error_inner: 1e-8
    function_space_velocity: DG
    function_space_pressure: DG
    polynomial_degree_velocity: 2
    polynomial_degree_pressure: 1

convection:
    c:
        convection_scheme: HRIC

slope_limiter:
    rho:
        method: HierarchicalTaylor
        plot: yes
        skip_boundary: no
        enforce_bounds: yes
    c:
        enforce_bounds: yes
    u:
        method: Solenoidal
        prelimiter: HierarchicalTaylor
        out_of_bounds_penalty_fac: 1000.0
        out_of_bounds_penalty_const: 0.1
        max_cost: 0.1
        
        #method: Componentwise
        #comp_method: HierarchicalTaylor
        #limit_conv: no 
        
        plot: yes
        use_cpp: yes
        skip_boundary: no
        #limit_no_cells: yes
        #surface_probe: free_surface

probes:
    -   name: free_surface
        enabled: no
        type: IsoSurface
        value: py$ (RHO - 1.0) / 2
        field: rho
        file_name: '_free_surface.out'
        custom_hook: MultiPhaseModelUpdated
        
    -   name: free_surface
        enabled: yes
        type: IsoSurface
        value: 0.5
        field: c
        file_name: '_free_surface.out'
        custom_hook: MultiPhaseModelUpdated

hooks:
    post_timestep:

    -   name: plot p
        enabled: no
        code: plot(p, title='p')

    -   name: plot c
        enabled: no
        code: plot(c, title='c')

    -   name: plot div(u)
        enabled: no
        code: |
          if not hasattr(simulation, 'divfunv'):
            simulation.divfunc = Function(Vc, name='divu')
          project(div(u), Vc, function=simulation.divfunc)
          plot(simulation.divfunc)

    -   name: plot to file
        enabled: no
        code: '[simulation.plotting.plot(name) for name in ("c", "div(u)|Vc", "p", "mag(u)")]'

    -   name: debug on fishy values
        enabled: no
        code: |
            umag = (u0.vector().array()**2 +  u1.vector().array()**2)
            if max(umag) > 1:
                run_debug_console(simulation, False)

    -   name: print location of largest divergence
        enabled: no
        code: |
            udiv = project(div(u), Vc)
            values = udiv.compute_vertex_values()
            coords = mesh.coordinates()
            valmax = 0
            for val, coord in zip(values, coords):
                if abs(val) > valmax:
                    valmax = abs(val)
                    coordmax = coord
            print '\n%10.3e   %5.2f %5.2f\n' % (valmax, coordmax[0], coordmax[1])
            if valmax > 1e-3:
                print 'Valmax is above 1e-3', valmax
                #run_debug_console(simulation, False)

    -   name: save colour fields
        enabled: no
        code: |
            if not 'cf' in hook_data:
                prefix = simulation.input.get_value('output/prefix')
                hook_data['cf'] = File(prefix + '_c.pvd')
                c.rename('c', 'c')
                #c_star.rename('c_star', 'c_star')
            rho = project(rho_star, Vc)
            rho.rename('rho', 'rho')
            hook_data['cf'] << (rho, t)
            hook_data['cf'] << (p, t)
            #hook_data['cf'] << (c_star, t)

    -   name: inspect fields
        enabled: yes
        code: |
            if not 'fi' in hook_data:
                from ocellaris.utils import FieldInspector
                hook_data['fi'] = FieldInspector('output/field_inspector.xdmf', Vu)#,
                                                 #startpos=(A - A / 4, 2 * A - A / 4),
                                                 #endpos=(A + A / 4, 2 * A + A / 4))
            if simulation.io.xdmf_write_interval > 0 and simulation.timestep % simulation.io.xdmf_write_interval == 0:
                fi = hook_data['fi']
                fi.write_function(u0, t)
                fi.write_function(u1, t)
                fi.write_function(u_conv0, t)
                fi.write_function(u_conv1, t)

